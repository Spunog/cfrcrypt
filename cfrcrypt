#!/usr/bin/perl

use strict;

use POSIX;
use IO::File;
use File::Temp;
use Getopt::Long;

our @KEY = (0xD6F63E19, 0x1AF08BEF);
our $HEADER = "ColdFusion Report Template\x1A";

##############################################################################
#
# XTEA Crypto algorithm, translated to Perl from the reference implementation
# on Wikipedia at:
#
# http://en.wikipedia.org/wiki/XTEA
#

our $DELTA = 0x9E3779B9;
our $NUM_ROUNDS = 32;

sub decrypt_block
{
  my ($vref, $kref) = @_;
  my ($v0, $v1) = @$vref;
  my @k = @$kref;

  my $sum = ($DELTA * $NUM_ROUNDS) & 0xFFFFFFFF;
  my ($a, $b, $c);
 
  for (my $i = 0; $i < $NUM_ROUNDS; $i++)
  {
    $a = ($v0 << 4) & 0xFFFFFFFF;
    $b = $v0 >> 5;
    $c = ($sum + $k[($sum >> 11) & 0x03]) & 0xFFFFFFFF;

    $v1 -= (($a ^ $b) + $v0) ^ $c;
    $v1 &= 0xFFFFFFFF;

    #####
    
    $sum = ($sum - $DELTA) & 0xFFFFFFFF;

    #####

    $a = ($v1 << 4) & 0xFFFFFFFF;
    $b = $v1 >> 5;
    $c = ($sum + $k[$sum & 0x03]) & 0xFFFFFFFF;

    $v0 -= (($a ^ $b) + $v1) ^ $c;
    $v0 &= 0xFFFFFFFF;
  }

  $vref->[0] = $v0;
  $vref->[1] = $v1;
}

sub encrypt_block
{
  my ($vref, $kref) = @_;
  my ($v0, $v1) = @$vref;
  my @k = @$kref;

  my $sum = 0;
  my ($a, $b, $c);
 
  for (my $i = 0; $i < $NUM_ROUNDS; $i++)
  {
    $a = ($v1 << 4) & 0xFFFFFFFF;
    $b = $v1 >> 5;
    $c = ($sum + $k[$sum & 0x03]) & 0xFFFFFFFF;

    $v0 += (($a ^ $b) + $v1) ^ $c;
    $v0 &= 0xFFFFFFFF;

    #####
    
    $sum = ($sum + $DELTA) & 0xFFFFFFFF;

    #####
    
    $a = ($v0 << 4) & 0xFFFFFFFF;
    $b = $v0 >> 5;
    $c = ($sum + $k[($sum >> 11) & 0x03]) & 0xFFFFFFFF;

    $v1 += (($a ^ $b) + $v0) ^ $c;
    $v1 &= 0xFFFFFFFF;
  }

  $vref->[0] = $v0;
  $vref->[1] = $v1;
}

##############################################################################
#
# Decrypt the contents of the provided file handle.
#

sub decrypt
{
  my ($input, $output, $size) = @_;

  my @k = (0, @KEY, 0);
  my @v;
  my ($header, $size);

  $input->read($header, length($HEADER)); # Reader header

  die "Missing magic!" if ($header ne $HEADER);

  $input->read($size, 4);
  $input->read($k[3], 4);
  $input->read($k[0], 4);
  
  $size = unpack("V", $size);
  $k[0] = unpack("V", $k[0]);
  $k[3] = unpack("V", $k[3]);

  while ($size > 0)
  {
    my $v0len = $input->read($v[0], 4);
    my $v1len = $input->read($v[1], 4);

    # Pad out to our block size and unpack as integers.

    $v[0] = unpack("V", $v[0] . "\0"x(4 - $v0len));
    $v[1] = unpack("V", $v[1] . "\0"x(4 - $v1len));

    decrypt_block(\@v, \@k);

    $v[0] = pack("V", $v[0]);
    $v[1] = pack("V", $v[1]);

    if ($size > 8)
    {
      $output->write($v[0]);
      $output->write($v[1]);

      $size -= 8;
    }
    else
    {
      if ($size > 4)
      {
        $output->write($v[0]);
        $output->write(substr($v[1], 0, $size - 4));
      }
      else
      {
        $output->write(substr($v[0], 0, $size));
      }

      $size = 0;
    }
  }

  $output->flush();
  $output->close();
}

sub encrypt
{
  my ($input, $output, $size) = @_;

  my @k = (0xDEADBEEF, @KEY, 0x8BADF00D);
  my @v;

  $output->write($HEADER);
  $output->write(pack("V", (($size % 8) != 0) ? ceil($size / 8) * 8 : $size));
  $output->write(pack("V", $k[3]));
  $output->write(pack("V", $k[0]));

  while (1)
  {
    my $v0len = $input->read($v[0], 4);
    my $v1len = $input->read($v[1], 4);

    if (($v0len + $v1len) > 0)
    {
      # Pad out to our block size and unpack as integers.

      $v[0] = unpack("V", $v[0] . " "x(4 - $v0len));
      $v[1] = unpack("V", $v[1] . " "x(4 - $v1len));

      encrypt_block(\@v, \@k);

      $v[0] = pack("V", $v[0]);
      $v[1] = pack("V", $v[1]);

      $output->write($v[0] . $v[1]);
    }

    last if (($v0len < 4) || ($v1len < 4));
  }

  $output->flush();
  $output->close();
}

############################
#
# Parse our arguments.
#

my %options;

Getopt::Long::Configure("passthrough");

GetOptions("d|decrypt" => \$options{"decrypt"},
           "e|encrypt" => \$options{"encrypt"},
           "o|output=s" => \$options{"output"},
           "h|help" => \$options{"help"}); 

if ($options{help})
{
  print <<HELP;
Usage: cfrcrypt <-e|-d> <-o output> <file>

Decrypts or encrypts ColdFusion Report files.  If no input file is specified,
reads from standard input.

Options:

  -e            - Encrypt the input data.
  -d            - Decrypt the input data.
  -o <filename> - An output file to write to.  Writes to standard output if
                  no output file name is specified.
  -h            - Display this help page.

If no explicit operation is specified, the type of operation to perform is 
inferred first by the filename extension, if an explicit file name was
specified, or by the input data itself, by searching for a header magic
string.

HELP

  exit(0);
}

############################
#
# Set up the input streams.
#

my ($input, $size, $output);

if (defined $ARGV[0])
{
  # A file name was specified, read our input from there

  $input = new IO::File("<" . $ARGV[0]) || die "Unable to open '$ARGV[0]': $!";

  IO::File::binmode($input);

  $input->seek(0, 2);
  $size = $input->tell();
  $input->seek(0, 0);
}
else
{
  # Otherwise, read the data from standard input, write it out to a temporary
  # file, and then operate on the temporary copy (which allows us to seek around
  # in the file).

  my ($buf, $read);
  my $stdin = new IO::Handle();

  $stdin->fdopen(fileno(STDIN), "r");

  $input = new File::Temp();
  $size = 0;

  while (($read = $stdin->read($buf, 1024)) > 0)
  {
    $input->write($buf, $read);
    $size += $read;
  }

  $input->seek(0, 0);
}

if ($options{output})
{
  # If an output file was specified, write the output there.

  $output = new IO::File(">" . $options{output}) || die "Unable to open '$options{output}': $!";

  IO::File::binmode($output);
}
else
{
  # Otherwise, write to standard output.
  
  $output = new IO::Handle();
  $output->fdopen(fileno(STDOUT), "w");
}

############################
#
# Now perform the operation.
#

if ($options{decrypt} || ($ARGV[0] =~ /\.cfr$/i))
{
  # If the decrypt option was specified or the filename provided ends in .cfr,
  # decrypt.

  decrypt($input, $output, $size);
}
elsif ($options{encrypt})
{
  # If the encrypt option was specified, just encrypt straight away.
  
  encrypt($input, $output, $size);
}
else
{
  # Otherwise, we gotta check the magic header string.  So read enough bytes
  # to cover the header, and see if the header was there.  If it was, 
  # decrypt, otherwise encrypt.
 
  my $header;

  $input->read($header, length($HEADER)); # Reader header
  $input->seek(0, 0);

  if ($header eq $HEADER)
  {
    decrypt($input, $output, $size);
  }
  else
  {
    encrypt($input, $output, $size);
  }
}

exit(0);

__END__

=head1 NAME

cfrcrypt - A tool to encrypt or decrypt ColdFusion Report files.

=head1 SYNOPSIS

cfrcrypt <-e|-d> <-o output> <input>

=head1 DESCRIPTION

ColdFusion sports a custom report file format (.cfr) which is, unfortunately,
encoded, such that these files become opaque blobs which cannot be version
controlled, modified via scripts, etc.  This tool makes it possible to decode
these files, modify them, and then re-encode them for use with ColdFusion.

By default, the tool reads from standard input and writes to standard output.
However, if an input file is specified, the data is read from that location,
and if an output file is specified, the results are written there (note, the
file indicated is overwritten).

If neither B<-e> nor B<-d> are specified, the operation to be performed is 
inferred based on the input data:

=over 8

=item

If an explicit input file name is specified, then the name is checked to see if
it ends in ".cfr".  If so, the file is decrypted, otherwise it's encrypted.

=item

If the tool is reading from standard input, the data is checked for a magic
header string present in all ColdFusion Report files.  If that string is
present, the data is decrypted.  Otherwise the data is encrypted.

=back

=head1 OPTIONS

=over 8

=item B<-e>

Encrypt the input data provided.

=item B<-d>

Decrypt the input data provided.

=item B<-o>

Write the output to the specified file.

=back

=head1 FILE FORMAT

ColdFusion report file is structured with a header of 39 bytes, followed by an
XTEA-encrypted payload.  XTEA (http://en.wikipedia.org/wiki/XTEA) is a simple
symmetric cipher employing 64-bit blocks and a 128-bit key.  The actual file
structure is as follows:

  | Header (27) | Size (4)   |
  | K4 (4)      | K0 (4)     |
  |           Data           |

Where K0 and K4 represent the first and last 32-bit words of the key.  The middle 
64 bits are a hard-coded shared key.  The size represents the size of the 
B<compressed> payload (including any additional padding).

=head1 COPYRIGHT, LICENSE AND WARRANTY

Copyright (C) 2011 by Brett Kosinski

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

=head1 AUTHOR

This software was originally written by Brett Kosinski, and you can find
it's home on github at:

https://github.com/fancypantalons/cfrcrypt

=cut
